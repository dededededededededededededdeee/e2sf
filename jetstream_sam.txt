@name JETSTREAM SAM
@inputs 
@outputs 
@persist Toggle Incr ForInd 
@persist LS:array RGB:vector Weapon:string Shield:entity O:entity
@trigger 
runOnTick(1)
interval(1)
propSpawnEffect(0)
Incr++

Weapon = "weapon_crowbar"

if (first()) { Toggle = 0 RGB = vec(255) }

if (findCanQuery()) { O = owner() }
O = owner()


if (O:weapon():type() == Weapon & Toggle == 0) { Toggle = 1
    
#grip
holoCreate(1)
holoPos(1, O:attachmentPos("anim_attachment_RH"))
holoAng(1, O:attachmentAng("anim_attachment_RH"))
holoModel(1, "hq_rcube")
holoMaterial(1, "phoenix_storms/dome")
holoColor(1, vec(random(255),random(255),random(255)))
holoScaleUnits(1, vec(2,2,7))
holoParentAttachment(1, O, "anim_attachment_RH")

#Laser
holoCreate(3)
holoPos(3, holoEntity(1):pos()+holoEntity(1):up()*22.5)
holoAng(3, O:attachmentAng("anim_attachment_RH"))
holoModel(3, "hq_cylinder")
holoMaterial(3, "phoenix_storms/dome")
holoScaleUnits(3, vec(2.45,1.45,40))
holoParentAttachment(3, O, "anim_attachment_RH")
holoColor(3,vec(58.8,29.4,0))
 
for (ForInd = 1,3) { holoAlpha(ForInd, 0) }
 }

if (changed(O:weapon():type() == Weapon) & O:weapon():type() == Weapon) { O:weapon():setAlpha(0) for (ForInd = 1,3) { holoAlpha(ForInd, 255) } }
if (changed(O:weapon():type() == Weapon) & O:weapon():type() != Weapon) { O:weapon():setAlpha(255) for (ForInd = 1,3) { holoAlpha(ForInd, 0) } }



if(duped()){selfDestructAll()} 


